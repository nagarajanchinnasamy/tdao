[comment {-*- tcl -*-}]
[manpage_begin tdao n 0.1.0]
[copyright {2013, Nagarajan Chinnasamy <nagarajanchinnasamy@gmail.com>}]
[moddesc   {Tcl Data Access Objects}]
[titledesc {Define and create Data Access Objects}]
[category  {Database}]
[require Tcl 8.5]
[require tdao [opt 0.1.0]]
[description]

[para]
[cmd tdao::dao] is a sub-package of [cmd tdao] package that provides
methods to [method define] the schema of a table/view in a DAO
definition and create and manipulate DAO instances. The interface
provided by [cmd tdao::dao] package is very similar to
[cmd struct::record] package. It just adds additional methods (
[method add], [method get], [method save] and [method delete]) to
[cmd struct::record] package to manipulate records of a table/view.

[para]
Each DAO definition creates an object that encompasses that definition.
Subsequently, using the definition object one can create DAO instances
of that definition. These instances can then be manipulated with the
[method cget], [method configure], [method reset] [method add],
[method get], [method save] and [method delete] methods.

[para]
With every DAO instance, [method [arg connectionName]] needs to be
associated to enable the instance to communicate with the database when
data manipulation methods [method add], [method get], [method save] and
[method delete] are invoked. This [method [arg connectionName]] can be
obtained using [method open] method of [cmd ::tdao::dbc] package. 

[para]
The [cmd tdao::dao] package only contains one top level command, but
several sub commands (see below). It also obeys the namespace in which
the DAO was defined, hence the objects returned are fully qualified.

[list_begin definitions]

[call [cmd {dao define}] [arg definitionName] [arg schemaName] [arg schemaFields] [opt [arg "-primarykey  fieldsList"]] [opt [arg "-autoincrement fieldsList"]] [opt [arg "-unique fieldsListOfLists"]]]

Defines a DAO. [arg definitionName] is the name of the DAO definition,
and is also used as an object command. This object command is used to
create DAO instances. [arg schemaName] is the name of the table/view
that this DAO defines. [arg schemaFields] are the field names of the
schema that make up the DAO definition. Optional arguments
[opt [arg "-primarykey  fieldsList"]] 
[opt [arg "-autoincrement fieldsList"]]
[opt [arg "-unique fieldsListOfLists"]] are used to include further
details of the schema into DAO definition.

[para]
A DAO definition contains a list of field names, where each field name
represents a column name in a table/view. A field can optionally have a
default initial value. When a default value is given, the field is
specified as a list having its name and value as elements. If no
default initial value is given, then the value is automatically set to
[const <<dao-undefined>>] by the [method "dao define"] method. For
example, a DAO definition of address table would look like this:

[example_begin]
# this is a DAO definition with name Address for table address
dao define Address address {
    addrline1
    addrline2
    {city Bangalore}
    {postalcode 560001}
    {country India}
}

[example_end]

All instances created from this DAO definition, will initially have 
Bangalore, 560001 and India as the value for [arg city],
[arg postalcode] and [arg country] respectively. [arg addrline1] and
[arg addrline2] will have internally set value of
[const <<dao-undefined>>]

[call [cmd {dao show}] [arg definitions]]

Returns a list of DAO definitionNames that have been defined.

[call [cmd {dao show}] [arg instances] [arg definitionName]]

Returns the instances that have been instantiated by
[arg definitionName].

[call [cmd {dao show}] [arg fields] [arg definitionName]]

Returns the field names that are defined by [arg definitionName]. It
returns the same format as how the DAOs were defined.

[call [cmd {dao show}] [arg values] [arg instanceName]]

Returns a list of values that are set for the instance
[arg instanceName]. The output is a list of key/value pairs.

[call [cmd {dao exists}] [arg definition] [arg definitionName]]

Returns 1 if a DAO [arg definition] with the name [arg definitionName]
exists, else returns 0.

[call [cmd {dao exists}] [arg instance] [arg instanceName]]

Returns 1 if a DAO [arg instance] with the name [arg instanceName]
exists, else returns 0

[call [cmd {dao delete}] [arg definition] [arg definitionName]]

Deletes DAO definition [arg definitionName], and all instances of
[arg definitionName]. It returns an error if the [arg definitionName]
does not exist.

[call [cmd {dao delete}] [arg instance] [arg instanceName]]

Deletes DAO [arg instance] with the name of [arg instanceName]. It
returns an error if the [arg instanceName] does not exist.

[list_end]

[para]

[section {DAO DEFINITION COMMAND}]

[list_begin definitions]

[call [arg definitionName] [method [arg instanceName|#auto]] [method [arg connectionName]] [opt [arg "-field1 val1"]] [opt [arg "-field2 val2"]] [opt [arg "..."]]]

Using the [arg definitionName] command that was created from the DAO
definition, instances of the DAO definition can be created. Once an
instance is created, then it contains the fields of the DAO definition,
very similar to how objects work. During instance generation, an object
command for the instance is created as well, using [arg instanceName].
This instance object command is used to access the data members of the
instance. During the instantiation, values for that instance can be
given in key/value pairs.

[para]
With every DAO instance, [method [arg connectionName]] needs to be
associated to enable the instance to communicate with the database when
data manipulation methods [method add], [method get], [method save] and
[method delete] are invoked. This [method [arg connectionName]] can be
obtained using [method open] method of [cmd ::tdao::dbc] package. 

[para]
Optionally, [arg #auto] can be used in place of [arg instanceName].
When #auto is used, then an instance name will automatically be
generated, of the form definitionName<integer>, where <integer> is a
unique integer (starting at 0) that is generated.

[para]
[example_begin]
# create an object instance addr1 with default values
Address addr1 conn
[example_end]

[para]
[example_begin]
# create an object instance addr2 with assigned values
Address addr2 conn -city Chennai -postalcode 638001
[example_end]

[list_end]
[para]

[section {DAO INSTANCE COMMANDS}]
 
The following subcommands and corresponding arguments are available to
any DAO instance command:

[list_begin definitions]
 
[call [arg instanceName] [method cget] [opt [arg -field1]] [opt [arg -field2]] [opt [arg "..."]]]

Each instance has the sub command [method cget] associated with it. This
is very similar to how Tk widget's cget command works. It queries
the values of the field for that particular instance. If
no arguments are given, then a key/value list is returned.

[para]

To get a value of a field, there are several ways to do this. 

[list_begin enumerated]

[enum]
To get a field's value, use the instance built-in [method cget] method:

[para]
[example_begin]
    [arg addr1] [method cget] -city
[example_end]

[enum]
To get multiple field values, you can specify them all in one command:
[para]
[example_begin]
    [arg addr1] [method cget] -addrline1 -addrline2
[example_end]

[enum]
To get a list of the key/value of all of the members, there are 3 ways:
[para]
[example_begin]
    [arg addr1]
    [arg addr1] [method cget]
    [arg addr1] [method configure]
[example_end]

[list_end]

[call [arg instanceName] [method configure] [opt [arg "-field1 val1"]] [opt [arg "-field2 val2"]] [opt [arg "..."]]]

Each instance has the sub command [method configure] associated with it. This
is very similar to how Tk widget's configure command works. It sets
the values of the particular field for that particular instance. If
no arguments are given, then a key/value list is returned.

[call [arg instanceName] [method reset] [opt [arg -field1]] [opt [arg -field2]] [opt [arg "..."]]]

Each instance has the sub command [method reset] associated with it. It
sets the values of the particular field to it's initial default value
given in the correponding DAO definition. Fields that were not given
default initial value are given a value of [const <<dao-undefined>>].
If no arguments are given, then value of all the fields are reset.

[para]

To set a value of a field, there are several ways to do this. 

[list_begin enumerated]

[enum]
To set a field value:
[para]
[example_begin]
    [arg addr1] [method configure] -addrline1 val1
[example_end]

[enum]
To set multiple field values, you can specify them all in one command:
[para]
[example_begin]
    [arg addr1] [method configure] -addrline1 va1 -addrline2 val2
[example_end]

[enum]
To reset all the field values as per the DAO definition:
[para]
[example_begin]
    [arg addr1] [method reset]
[example_end]

[list_end]

[call [arg instanceName] [method add] [opt [arg -field1]] [opt [arg -field2]] [opt [arg "..."]]]

Each instance has the sub command [method add] associated with it. It 
inserts the object as a new record into database. In preparing the
record to insert, this method prepares a list of name-value pairs,
by default, from all the fields of the object. However, if the optional
arguments are passed, it uses only those field names in the arguments
in preparing the name-value pairs. While preparing the name-value
pairs, it includes only those fields that are initialized with a value
other than <<dao-undefined>>. Instead of an empty string, we make use
of this state of a field to indicate the absense of a field in the
insert operation (thus resulting in NULL or default value in the
database). Upon successful completion of add operation, the new values
of sequence / auto-incremented fields are populated back into the
object.

[para]
Returns the status of add operation as a numerical value. A value
greater than zero indicates success.

[call [arg instanceName] [method get] [opt [arg -field1]] [opt [arg -field2]] [opt [arg "..."]]]

Each instance has the sub command [method get] associated with it. It
retrieves a unique record from the database and populates DAO instance
fields. The process of preparing the condition needed to identify the
unique record from the field values of a DAO instance is explained in
section Object To Database Record Mapping. By default, this method
retrieves the values for all the fields of the object. However, if the
optional arguments are passed, it retrieves only those fields in the
arguments.

[para]
Returns fieldname-value pairs retrieved from database as a Tcl 
dictionary. If the retrieval does not return any record from database,
then the result will be an empty string.

[call [arg instanceName] [method save] [opt [arg -field1]] [opt [arg -field2]] [opt [arg "..."]]]

Each instance has the sub command [method save] associated with it. It
saves the object by updating the corresponding record into the
database. The process of preparing the condition needed to identify the
unique record from the field values of a DAO instance is explained in
section Object To Database Record Mapping. In preparing the
record to updte, this method prepares a list of name-value pairs,
by default, from all the fields of the object. However, if the optional
arguments are passed, it uses only those field names in the arguments
to prepare the name-value pairs. While preparing the name-value
pairs, it includes only those fields that are initialized with a value
other than <<dao-undefined>>. Instead of an empty string, we make use
of this state of a field to indicate the absense of a field in the
update operation (thus not affecting those fields in the database).

[para]
Returns the status of save operation as a numerical value. A value
greater than zero indicates success.

[call [arg instanceName] [method delete]]

Each instance has the sub command [method delete] associated with it.
It deletes the record from database represented by the object and
resets the object values. The unique record to be deleted from the
database is identified based on the description provided in Object To
Database Record Mapping.

[para]
Returns the status of delete operation as a numerical value. A value
greater than zero indicates success.


[list_end]

[section {Object To Database Record Mapping}]
Methods [method get], [method save] and [method delete] need to
identify a unique record in the database that the DAO instance
represents. A unique record is identified by the values of primary key
and/or unique fields of the object. These field names are provided in
DAO definition using optional arguments -primarykey, -unique and
-autoincrement options.

[para]
For e.g., if the primary key was defined as {pk1 pk2} and unique fields
were defined as {{uq1} {uq2 uq3}} then the condition to be used in
WHERE clause of SQL statement to identify the unique record will be:

[para]
[example_begin]
((pk1='pk1value' AND pk2='pk2vaue') OR (uq1='uq1value') OR (uq2='uq2value' AND uq3='uq3value'))
[example_end]

[para]
If any of the fields listed as part of primary key or unique fields are
uninitialized (i.e., having the value <<dao-undefined>>), then those
fields are not included in the condition. For e.g., if pk1 is
uninitialized, then the condition will be:

[para]
[example_begin]
((uq1='uq1value') OR (uq2='uq2value' AND uq3='uq3value'))
[example_end]

[para]
Or, for e.g., if uq2 is uninitialized, then the condition will be:
[para]
[example_begin]
((pk1='pk1value' AND pk2='pk2vaue') OR (uq1='uq1value')).
[example_end]

[para]
Or, for e.g., if uq1 is uninitialized, then the condition will be:
[para]
[example_begin]
((pk1='pk1value' AND pk2='pk2vaue') OR (uq2='uq2value' AND uq3='uq3value')).
[example_end]

[section EXAMPLES]
 
Following examples are provided to give a good illustration on how to use
this package.

[para]      
[emph {Example 1}]
[para]

[para]
[example {

##
##  This is an interactive example, to see what is 
##  returned by each command as well.
##

% namespace import ::tdao::dao::*

% # define a nested record. Notice that country has default 'USA'.
% dao define Address \
    address {
        id
        addrline1
        addrline2
        city
        postalcode
        {country USA}
    } \
    -primarykey id \
    -autoincrement id
::Address
% # Create an instance for the Address DAO definition.
% Address addr1
::addr1
% # Display some introspection values
% dao show definitions
::Address
% #
% record show values addr1
-id <<dao-undefined>> -addline1 <<dao-undefined>> -addrline2 <<dao-undefined>> -city <<dao-undefined>> -postalcode <<dao-undefined>> -country USA
% #
% record show instances Address
::addr1
% #
% addr1 configure
-id <<dao-undefined>> -addline1 <<dao-undefined>> -addrline2 <<dao-undefined>> -city <<dao-undefined>> -postalcode <<dao-undefined>> -country USA
% #
% addr1 cget
-id <<dao-undefined>> -addline1 <<dao-undefined>> -addrline2 <<dao-undefined>> -city <<dao-undefined>> -postalcode <<dao-undefined>> -country USA
% # copy one DAO definition to another
% dao define Address2 address2 [dao show members Address]
::Address2
}]

[para]
[section {See Also}]
[cmd tdao], [cmd tdao::dbc] and [cmd struct::record]
[para]
[keywords DAO {Data Access Objects} {Database Connectivity}]
[para]
[section {AUTHOR}]

Nagarajan Chinnasamy <nagarajanchinnasamy@gmail.com>

[section {BUGS, IDEAS, FEEDBACK}]

This document, and the package it describes, will undoubtedly contain
bugs and other problems.

Please report such in the category [emph {tdao :: dao}] of the
[uri {http://sourceforge.net/tracker/?group_id=12883} {Tcllib SF Trackers}].

Please also report any ideas for enhancements you may have for either
package and/or documentation.
[manpage_end]
