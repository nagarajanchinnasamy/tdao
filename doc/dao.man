[comment {-*- tcl -*-}]
[manpage_begin tdao::dao n 0.1.0]
[copyright {2013, Nagarajan Chinnasamy <nagarajanchinnasamy@gmail.com>}]
[moddesc   {Tcl Data Access Objects}]
[titledesc {Define and create DAOs}]
[category  {Database}]
[require Tcl 8.5]
[require struct::record [opt 1.2.1]]
[description]

The [cmd ::tdao::dao] package provides a mechanism to define and use
Data Access Objects (DAOs) in a platform independent, object oriented manner.
A DAO definition represents the definition of a table/view in a database. A
DAO instance represents a record/tuple in a table. A DAO definition contains
name of the table/view, list of field names and optional information about primary key, unique and
auto-increment (or sequence) fields.

[para]
Each DAO definition creates an object that encompasses that definition. Subsequently, that
definition object can create instances of that definition. These instances can then
be manipulated with the [method cget], [method configure] and [method reset] methods.

[para]
The package only contains one top level command, but several sub commands (see below). It also obeys the namespace in which the DAO was defined, hence the objects returned are fully qualified.

[list_begin definitions]

[call [cmd {dao define}] [arg definitionName] [arg schemaName] [arg schemaMembers] [opt [arg "-primarykey fieldsList -autoincrement fieldsList -unique fieldsListOfLists]]]

Defines a DAO. [arg definitionName] is the name of the DAO definition, and is also
used as an object command. This object command is used to create instances of the
DAO definition. [arg schemaName] is the name of the table/view that this DAO defines.
[arg schemaMembers] are the field names of the schema that make up the DAO definition.
Optional arguments [opt [arg "-primarykey fieldsList -autoincrement fieldsList -unique fieldsListOfLists]]
are used include further details of the schema into DAO definition.

[call [cmd {dao show}] [arg definitions]]

Returns a list of DAO definitionNames that have been defined.

[call [cmd {dao show}] [arg instances] [arg definitionName]]

Returns the instances that have been instantiated by
[arg definitionName].

[call [cmd {dao show}] [arg fields] [arg definitionName]]

Returns the field names that are defined by [arg definitionName]. It
returns the same format as how the DAOs were defined.

[call [cmd {dao show}] [arg values] [arg instanceName]]

Returns a list of values that are set for the instance
[arg instanceName]. The output is a list of key/value pairs.

[call [cmd {dao exists}] [arg definition] [arg definitionName]]

Tests for the existence of a DAO [arg definition] with the
name [arg definitionName].

[call [cmd {dao exists}] [arg instance] [arg instanceName]]

Tests for the existence of a DAO [arg instance] with the
name [arg instanceName].

[call [cmd {dao delete}] [arg definition] [arg definitionName]]

Deletes DAO definition [arg definitionName], and all instances of [arg definitionName]. It will return
an error if the [arg definitionName] does not exist.

[call [cmd {dao delete}] [arg instance] [arg instanceName]]

Deletes DAO [arg instance] with the name of [arg instanceName]. It
will return an error if the [arg instanceName] does not exist.

[list_end]
[para]
      
[section {RECORD MEMBERS}]

Record members can either be variables, or other records, However, the
same record can not be nested witin itself (circular). To define a
nested record, you need to specify the [const record] keyword, along
the with name of the record, and the name of the instance of that
nested record. For example, it would look like this:

[para]
[example_begin]
# this is the nested record
record define mynestedrecord {
    nest1
    nest2
}

# This is the main record
record define myrecord {
    mem1
    mem2
    {record mynestedrecord mem3}
}

[example_end]

You can also assign default or initial values to the members of a record,
by enclosing the member entry in braces:

[para]
[example_begin]

record define myrecord {
    mem1
    {mem2 5}
}

[example_end]

All instances created from this record definition, will initially have 5 as
the value for [arg mem2]. If no default is given, then the value will be the empty string.

[para]
[emph {Getting Values}]
[para]

To get a value of a member, there are several ways to do this. 

[list_begin enumerated]

[enum]
To get a member value, then use the instance built-in [method cget] method:
[para]
    [arg instanceName] [method cget] -mem1

[enum]
To get multiple member values, you can specify them all in one command:
[para]
    [arg instanceName] [method cget] -mem1 -mem2

[enum]
To get a list of the key/value of all of the members, there are 3 ways:
[para]
    - [arg instanceName] [method cget]
[para]
	- [arg instanceName] [method configure]
[para]
	- [arg instanceName]

[enum]
To get a value of a nested member, then use the dot notation:
[para]
    [arg instanceName] [method cget] -mem3.nest1

[list_end]

[para]
[emph {Setting Values}]
[para]

To set a value of a member, there are several ways to do this. 

[list_begin enumerated]

[enum]
To set a member value, then use the instance built-in [method configure] method:
[para]
    [arg instanceName] [method configure] -mem1 val1

[enum]
To set multiple member values, you can specify them all in one command:
[para]
    [arg instanceName] [method configure] -mem1 va1 -mem2 val2

[enum]
To set a value of a nested member, then use the dot notation:
[para]
    [arg instanceName] [method configure] -mem3.nest1 value

[list_end]

[para]
[emph {Alias access}]
[para]

In the original implementation, access was done by using dot notation similar to how 'C' structures are accessed. However, 
there was a concensus to make the interface more Tcl like, which made sense. However, the original alias access still
exists. It might prove to be helpful to some.

[para]
Basically, for every member of every instance, an alias is created. This alias is used to get and set values for that
member. An example will illustrate the point, using the above defined records:

[para]
[example_begin]
# Create an instance first
% myrecord inst1
::inst1
% # To get a member of an instance, just use the 
% # alias (it behaves like a Tcl command):
% inst1.mem1
%
% # To set a member via the alias, just include 
% # a value (optionally the equal sign - syntactic sugar)
% inst1.mem1 = 5
5
% inst1.mem1
5
% # For nested records, just continue with the 
% # dot notation (note no equal sign)
% inst1.mem3.nest1 10
10
% inst1.mem3.nest1
10
% # just the instance by itself gives all 
% # member/values pairs for that instance
% inst1
-mem1 5 -mem2 {} -mem3 {-nest1 10 -nest2 {}}
% # and to get all members within the nested record
% inst1.mem3
-nest1 10 -nest2 {}
%

[example_end]

[section {RECORD COMMAND}]

The following subcommands and corresponding arguments are available to any
record command:

[list_begin definitions]

[call [arg recordName] [method [arg instanceName|#auto]] [opt [arg "-member1 value1 -member2 value2 ..."]]]

Using the [arg recordName] object command that was created from the record definition, 
instances of the record definition can be created. Once a instance is
created, then it inherits the members of the record definition, very
similar to how objects work. During instance generation, an object command for the instance
is created as well, using [arg instanceName]. This object command is used
to access the data members of the instance. During the instantiation, values for
that instance can be given, [emph but] all values must be given, and be given
in key/value pairs. Nested records, need to be in list format.

[para]
Optionally, [arg #auto] can be used in place of [arg instanceName]. When #auto is used,
then a instance name will automatically be generated, of the form recordName<integer>, where
<integer> is a unique integer (starting at 0) that is generated.

[list_end]
[para]

[section {INSTANCE COMMAND}]
 
The following subcommands and corresponding arguments are available to
any record instance command:

[list_begin definitions]
 
[call [arg instanceName] [method cget] [opt [arg "-member1 -member2 ..."]]]

Each instance has the sub command [method cget] associated with it. This
is very similar to how Tk widget's cget command works. It queries
the values of the member for that particular instance. If
no arguments are given, then a key/value list is returned.

[call [arg instanceName] [method configure] [opt [arg "-member1 value1 -member2 value2 ..."]]]

Each instance has the sub command [method configure] associated with it. This
is very similar to how Tk widget's configure command works. It sets
the values of the particular member for that particular instance. If
no arguments are given, then a key/value list is returned.

[list_end]

[section EXAMPLES]
 
Two examples are provided to give an good illustration on how to use
this package.

[para]      
[emph {Example 1}]
[para]

Probably the most obvious example would be to hold contact information,
such as addresses, phone numbers, comments, etc. Since a person can have
multiple phone numbers, multiple email addresses, etc, we will use nested
records to define these. So, the first thing we do is define the nested
records:

[para]
[example {

##
##  This is an interactive example, to see what is 
##  returned by each command as well.
##

% namespace import ::tdao::dao::*

% # define a nested record. Notice that country has default 'USA'.
% record define locations {
    street
    street2
    city
    state
    zipcode
    {country USA}
    phone
}
::locations
% # Define the main record. Notice that it uses the location record twice.
% record define contacts {
    first 
    middle 
    last 
    {record locations home}
    {record locations work}
}
::contacts
% # Create an instance for the contacts record.
% contacts cont1
::cont1
% # Display some introspection values
% record show records
::contacts ::locations
% #
% record show values cont1
-first {} -middle {} -last {} -home {-street {} -street2 {} -city {} -state {} -zipcode {} -country USA -phone {}} -work {-street {} -street2 {} -city {} -state {} -zipcode {} -country USA -phone {}}
% #
% record show instances contacts
::cont1
% #
% cont1 config
-first {} -middle {} -last {} -home {-street {} -street2 {} -city {} -state {} -zipcode {} -country USA -phone {}} -work {-street {} -street2 {} -city {} -state {} -zipcode {} -country USA -phone {}}
% #
% cont1 cget
-first {} -middle {} -last {} -home {-street {} -street2 {} -city {} -state {} -zipcode {} -country USA -phone {}} -work {-street {} -street2 {} -city {} -state {} -zipcode {} -country USA -phone {}}
% # copy one record to another record
% record define contacts2 [record show members contacts]
::contacts2
% record show members contacts2
first middle last {record locations home} {record locations work}
% record show members contacts
first middle last {record locations home} {record locations work}
%
}]

[para]      
[emph {Example 1}]
[para]

This next example just illustrates a simple linked list
[para]
[example {

% # define a very simple record for linked list
% record define llist {
    value
    next
}
::llist
% llist lstart
::lstart
% lstart config -value 1 -next [llist #auto]
% [lstart cget -next] config -value 2 -next [llist #auto]
% [[lstart cget -next] cget -next] config -value 3 -next "end"
% set next lstart
lstart
% while 1 {
lappend values [$next cget -value]
set next [$next cget -next]
if {[string match "end" $next]} {break}
}
% puts "$values"
1 2 3
% # cleanup linked list
% # We could just use delete record llist also
% foreach I [record show instances llist] {
record delete instance $I
}
% record show instances llist
%

}]

[para]

[section {BUGS, IDEAS, FEEDBACK}]

This document, and the package it describes, will undoubtedly contain
bugs and other problems.

Please report such in the category [emph {struct :: record}] of the
[uri {http://sourceforge.net/tracker/?group_id=12883} {Tcllib SF Trackers}].

Please also report any ideas for enhancements you may have for either
package and/or documentation.


[keywords struct record {data structures}]
[manpage_end]
