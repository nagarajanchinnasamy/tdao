[comment {-*- tcl -*-}]
[manpage_begin tdao n 0.1.1]
[copyright {2013, Nagarajan Chinnasamy <nagarajanchinnasamy@gmail.com>}]
[moddesc   {Tcl Data Access Objects}]
[titledesc {Define and create Data Access Objects}]
[category  {Database}]
[require Tcl 8.5]
[require tdao [opt 0.1.1]]
[description]

The [cmd tdao] package provides an object oriented mechanism to define
and use Data Access Objects (DAOs) in a DBMS platform independent manner.
A DAO definition models a table/view of a database through a list of
field/column names and optional information about primary key, unique
and auto-increment (or sequence) fields. A DAO instance represents a
record/tuple of a table/view. DAO instances are used to manipulate (
add, get, save and delete) records of a table.

[para]
While [cmd tdao] provides an object oriented mechanism to work with DAOs,
it does not depend on any object oriented extensions of Tcl. Hence, the
knowledge of such extensions is not necessary.

[para]
[cmd tdao] package contains two sub-packages: [cmd tdao::dbc] and
[cmd tdao::dao].

[para]
[cmd tdao::dbc] package provides methods to [method load] a database
driver and [method open] a database connection. Using the connection
handle returned by [method open], one can invoke record manipulation
methods, transaction handling methods and a method to [method close]
the database connection. [cmd tdao::dbc] supports connectivity to
[const sqlite], [const postgres], [const mariadb] database
drivers.

[para]
[cmd tdao::dao] package provides methods to [method define] the schema
of a table/view in a DAO definition and create and manipulate DAO
instances. The interface provided by [cmd tdao::dao] package is very
similar to [cmd struct::record] package. It just adds additional
methods ([method add], [method get], [method save] and [method delete])
to [cmd struct::record] package to manipulate records of a table/view.

[para]
With every DAO instance, a [method [arg connection]] handle needs to be
associated to enable the instance to communicate with the database when
data manipulation methods [method add], [method get], [method save] and
[method delete] are invoked. This [method [arg connection]] can be
obtained using [method open] method of [cmd ::tdao::dbc] package. 

[para]
[section EXAMPLES]
 
Following example gives a step-by-step illustration on how to use
this package.

[para]
[example_begin]
#
# Step 0: Setup a database named employee using the employee_schema.sql
#         found in the respective sub-folder in demo folder. Create
#         necessary user account and previleges.
#
# Step 1: Load tdao package and import dao and dbc commands
#
#
package require tdao
namespace import -force tdao::dao::dao
namespace import -force tdao::dbc::dbc
[example_end]
[para]
[example {
#
# Step 2: Load Database connectivity module and open a connection.
#         Un/Comment lines below as necessary
#
#
set db [dbc load sqlite]
set conn [$db open [file normalize "sqlite/employee.db"]]
#~ set db [dbc load postgres]
#~ set conn [$db open employee -user nagu -password Welcome123]
#~ set db [dbc load mariadb]
#~ set conn [$db open employee -user nagu -password Welcome123]
}]
[para]
[example {
#
# Step 3: Define Data Access Objects (DAO): address & employee
#
#
puts [dao define Address \
  address {
    id
    addrline1
    addrline2
    {city Bangalore}
    {postalcode 560001}
    {country India}
} -primarykey id -autoincrement id]
#
#
puts [dao define Employee \
  employee {
    id
    name
    rollno
    address_id
} -primarykey id -autoincrement id]
}]
[para]
[example {
#
# Step 4: Define Transactions: save_employee
#
#
proc save_employee {conn op emp addr} {
  $conn begin
    switch $op {
      add {
        if {[catch {$addr add} err]} {
          $conn rollback
          return -code error $err
        }

        $emp configure -address_id [$addr cget -id]
        if {[catch {$emp add} err]} {
          $conn rollback
          return -code error $err
        }
      }
      update {
        if {[catch {$addr save} err]} {
          $conn rollback
          return -code error $err
        }
        if {[catch {$emp save} err]} {
          $conn rollback
          return -code error $err
        }          
      }
    }
  $conn commit

  return 1
}
}]
[para]
[example {
#
# Step 5: Instantiate DAOs address & employee
#
#
Employee emp $conn -name "Employee Name1" -rollno "INBNG0001"
puts "Employee before adding: [emp cget]"

Address addr $conn \
  -addrline1 "Address Line 1" \
  -addrline2 "Address Line 2"
puts "Address before adding: [addr cget]"
}]
[para]
[example {
#
# Step 6: Add/Modify employee & address
#
#
if {[catch {save_employee $conn add emp addr} err]} {
  puts "Saving employee failed...\nError: $err"
  $conn close
  exit
}

puts "Employee after adding: [emp cget]"
puts "Address after adding: [addr cget]"

# Modify and save Address object.
addr configure \
  -addrline1 "Updated Address Line 1" \
  -addrline2 "Updated Address Line 2" \
  -city "Updated City Name" \
  -country "Updated Country Name" \
  -postalcode "Updated Postal Code"
addr save

# Check if the changes are reflected by retrieving it from database
addr reset
puts "Reset address: [addr cget]"
addr configure -id [emp cget -address_id]
addr get
puts "Modified address: [addr cget]"
}]
[para]
[example {
#
# Step 7: Clean up and close the database connection
#
#
dao delete instances addr emp
dao delete definition Address Employee
$conn close
}]


[para]
[section {See Also}]
[cmd struct::record], [cmd tdao::dbc] and [cmd tdao::dao]
[para]
[keywords DAO {Data Access Objects} {Database Connectivity}]
[para]
[section {AUTHOR}]

Nagarajan Chinnasamy <nagarajanchinnasamy@gmail.com>

[section {BUGS, IDEAS, FEEDBACK}]

This document, and the package it describes, will undoubtedly contain
bugs and other problems.

Please report such in the category [emph {tdao}] of the
[uri {http://sourceforge.net/tracker/?group_id=12883} {Tcllib SF Trackers}].

Please also report any ideas for enhancements you may have for either
package and/or documentation.

[manpage_end]
